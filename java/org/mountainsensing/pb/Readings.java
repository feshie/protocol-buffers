// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: readings.proto

package org.mountainsensing.pb;

public final class Readings {
  private Readings() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SampleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Sample)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required fixed32 time = 1;</code>
     *
     * <pre>
     **
     * The epoch time at which the reading was taken
     * </pre>
     */
    boolean hasTime();
    /**
     * <code>required fixed32 time = 1;</code>
     *
     * <pre>
     **
     * The epoch time at which the reading was taken
     * </pre>
     */
    int getTime();

    /**
     * <code>optional float batt = 2;</code>
     *
     * <pre>
     **
     * Battery voltage in Volts
     * </pre>
     */
    boolean hasBatt();
    /**
     * <code>optional float batt = 2;</code>
     *
     * <pre>
     **
     * Battery voltage in Volts
     * </pre>
     */
    float getBatt();

    /**
     * <code>optional float temp = 3;</code>
     *
     * <pre>
     **
     * Temperature in Celcius
     * </pre>
     */
    boolean hasTemp();
    /**
     * <code>optional float temp = 3;</code>
     *
     * <pre>
     **
     * Temperature in Celcius
     * </pre>
     */
    float getTemp();

    /**
     * <code>optional sint32 accX = 4;</code>
     *
     * <pre>
     **
     * RAW accelerometer data
     * </pre>
     */
    boolean hasAccX();
    /**
     * <code>optional sint32 accX = 4;</code>
     *
     * <pre>
     **
     * RAW accelerometer data
     * </pre>
     */
    int getAccX();

    /**
     * <code>optional sint32 accY = 5;</code>
     */
    boolean hasAccY();
    /**
     * <code>optional sint32 accY = 5;</code>
     */
    int getAccY();

    /**
     * <code>optional sint32 accZ = 6;</code>
     */
    boolean hasAccZ();
    /**
     * <code>optional sint32 accZ = 6;</code>
     */
    int getAccZ();

    /**
     * <code>optional uint32 ADC1 = 7;</code>
     *
     * <pre>
     **
     * RAW data from ADC1
     * </pre>
     */
    boolean hasADC1();
    /**
     * <code>optional uint32 ADC1 = 7;</code>
     *
     * <pre>
     **
     * RAW data from ADC1
     * </pre>
     */
    int getADC1();

    /**
     * <code>optional uint32 ADC2 = 8;</code>
     *
     * <pre>
     **
     * RAW data from ADC2
     * </pre>
     */
    boolean hasADC2();
    /**
     * <code>optional uint32 ADC2 = 8;</code>
     *
     * <pre>
     **
     * RAW data from ADC2
     * </pre>
     */
    int getADC2();

    /**
     * <code>optional uint32 rain = 9;</code>
     *
     * <pre>
     **
     * RAW data from rain sensor
     * </pre>
     */
    boolean hasRain();
    /**
     * <code>optional uint32 rain = 9;</code>
     *
     * <pre>
     **
     * RAW data from rain sensor
     * </pre>
     */
    int getRain();

    /**
     * <code>optional bytes AVR = 10;</code>
     *
     * <pre>
     **
     * RAW (not delimited) protocol buffer data from AVR sensor
     * </pre>
     */
    boolean hasAVR();
    /**
     * <code>optional bytes AVR = 10;</code>
     *
     * <pre>
     **
     * RAW (not delimited) protocol buffer data from AVR sensor
     * </pre>
     */
    com.google.protobuf.ByteString getAVR();

    /**
     * <code>required uint32 id = 11;</code>
     *
     * <pre>
     **
     * The identifier of this reading
     * Unique for the lifetime of the reading on the node
     * </pre>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 11;</code>
     *
     * <pre>
     **
     * The identifier of this reading
     * Unique for the lifetime of the reading on the node
     * </pre>
     */
    int getId();

    /**
     * <code>optional float humid = 12;</code>
     *
     * <pre>
     **
     * The humidity in percentage (0-100)
     * </pre>
     */
    boolean hasHumid();
    /**
     * <code>optional float humid = 12;</code>
     *
     * <pre>
     **
     * The humidity in percentage (0-100)
     * </pre>
     */
    float getHumid();

    /**
     * <code>optional .PowerInfo power = 13;</code>
     *
     * <pre>
     **
     * Power statistics from the power board
     * </pre>
     */
    boolean hasPower();
    /**
     * <code>optional .PowerInfo power = 13;</code>
     *
     * <pre>
     **
     * Power statistics from the power board
     * </pre>
     */
    org.mountainsensing.pb.Power.PowerInfo getPower();
    /**
     * <code>optional .PowerInfo power = 13;</code>
     *
     * <pre>
     **
     * Power statistics from the power board
     * </pre>
     */
    org.mountainsensing.pb.Power.PowerInfoOrBuilder getPowerOrBuilder();
  }
  /**
   * Protobuf type {@code Sample}
   *
   * <pre>
   **
   * Represents a reading made by a node
   * </pre>
   */
  public static final class Sample extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:Sample)
      SampleOrBuilder {
    // Use Sample.newBuilder() to construct.
    private Sample(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Sample(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Sample defaultInstance;
    public static Sample getDefaultInstance() {
      return defaultInstance;
    }

    public Sample getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Sample(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              time_ = input.readFixed32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              batt_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              temp_ = input.readFloat();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              accX_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              accY_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              accZ_ = input.readSInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              aDC1_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              aDC2_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              rain_ = input.readUInt32();
              break;
            }
            case 82: {
              bitField0_ |= 0x00000200;
              aVR_ = input.readBytes();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              id_ = input.readUInt32();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              humid_ = input.readFloat();
              break;
            }
            case 106: {
              org.mountainsensing.pb.Power.PowerInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = power_.toBuilder();
              }
              power_ = input.readMessage(org.mountainsensing.pb.Power.PowerInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(power_);
                power_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mountainsensing.pb.Readings.internal_static_Sample_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mountainsensing.pb.Readings.internal_static_Sample_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mountainsensing.pb.Readings.Sample.class, org.mountainsensing.pb.Readings.Sample.Builder.class);
    }

    public static com.google.protobuf.Parser<Sample> PARSER =
        new com.google.protobuf.AbstractParser<Sample>() {
      public Sample parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sample(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Sample> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TIME_FIELD_NUMBER = 1;
    private int time_;
    /**
     * <code>required fixed32 time = 1;</code>
     *
     * <pre>
     **
     * The epoch time at which the reading was taken
     * </pre>
     */
    public boolean hasTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required fixed32 time = 1;</code>
     *
     * <pre>
     **
     * The epoch time at which the reading was taken
     * </pre>
     */
    public int getTime() {
      return time_;
    }

    public static final int BATT_FIELD_NUMBER = 2;
    private float batt_;
    /**
     * <code>optional float batt = 2;</code>
     *
     * <pre>
     **
     * Battery voltage in Volts
     * </pre>
     */
    public boolean hasBatt() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float batt = 2;</code>
     *
     * <pre>
     **
     * Battery voltage in Volts
     * </pre>
     */
    public float getBatt() {
      return batt_;
    }

    public static final int TEMP_FIELD_NUMBER = 3;
    private float temp_;
    /**
     * <code>optional float temp = 3;</code>
     *
     * <pre>
     **
     * Temperature in Celcius
     * </pre>
     */
    public boolean hasTemp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float temp = 3;</code>
     *
     * <pre>
     **
     * Temperature in Celcius
     * </pre>
     */
    public float getTemp() {
      return temp_;
    }

    public static final int ACCX_FIELD_NUMBER = 4;
    private int accX_;
    /**
     * <code>optional sint32 accX = 4;</code>
     *
     * <pre>
     **
     * RAW accelerometer data
     * </pre>
     */
    public boolean hasAccX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sint32 accX = 4;</code>
     *
     * <pre>
     **
     * RAW accelerometer data
     * </pre>
     */
    public int getAccX() {
      return accX_;
    }

    public static final int ACCY_FIELD_NUMBER = 5;
    private int accY_;
    /**
     * <code>optional sint32 accY = 5;</code>
     */
    public boolean hasAccY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 accY = 5;</code>
     */
    public int getAccY() {
      return accY_;
    }

    public static final int ACCZ_FIELD_NUMBER = 6;
    private int accZ_;
    /**
     * <code>optional sint32 accZ = 6;</code>
     */
    public boolean hasAccZ() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 accZ = 6;</code>
     */
    public int getAccZ() {
      return accZ_;
    }

    public static final int ADC1_FIELD_NUMBER = 7;
    private int aDC1_;
    /**
     * <code>optional uint32 ADC1 = 7;</code>
     *
     * <pre>
     **
     * RAW data from ADC1
     * </pre>
     */
    public boolean hasADC1() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 ADC1 = 7;</code>
     *
     * <pre>
     **
     * RAW data from ADC1
     * </pre>
     */
    public int getADC1() {
      return aDC1_;
    }

    public static final int ADC2_FIELD_NUMBER = 8;
    private int aDC2_;
    /**
     * <code>optional uint32 ADC2 = 8;</code>
     *
     * <pre>
     **
     * RAW data from ADC2
     * </pre>
     */
    public boolean hasADC2() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 ADC2 = 8;</code>
     *
     * <pre>
     **
     * RAW data from ADC2
     * </pre>
     */
    public int getADC2() {
      return aDC2_;
    }

    public static final int RAIN_FIELD_NUMBER = 9;
    private int rain_;
    /**
     * <code>optional uint32 rain = 9;</code>
     *
     * <pre>
     **
     * RAW data from rain sensor
     * </pre>
     */
    public boolean hasRain() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 rain = 9;</code>
     *
     * <pre>
     **
     * RAW data from rain sensor
     * </pre>
     */
    public int getRain() {
      return rain_;
    }

    public static final int AVR_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString aVR_;
    /**
     * <code>optional bytes AVR = 10;</code>
     *
     * <pre>
     **
     * RAW (not delimited) protocol buffer data from AVR sensor
     * </pre>
     */
    public boolean hasAVR() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bytes AVR = 10;</code>
     *
     * <pre>
     **
     * RAW (not delimited) protocol buffer data from AVR sensor
     * </pre>
     */
    public com.google.protobuf.ByteString getAVR() {
      return aVR_;
    }

    public static final int ID_FIELD_NUMBER = 11;
    private int id_;
    /**
     * <code>required uint32 id = 11;</code>
     *
     * <pre>
     **
     * The identifier of this reading
     * Unique for the lifetime of the reading on the node
     * </pre>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required uint32 id = 11;</code>
     *
     * <pre>
     **
     * The identifier of this reading
     * Unique for the lifetime of the reading on the node
     * </pre>
     */
    public int getId() {
      return id_;
    }

    public static final int HUMID_FIELD_NUMBER = 12;
    private float humid_;
    /**
     * <code>optional float humid = 12;</code>
     *
     * <pre>
     **
     * The humidity in percentage (0-100)
     * </pre>
     */
    public boolean hasHumid() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float humid = 12;</code>
     *
     * <pre>
     **
     * The humidity in percentage (0-100)
     * </pre>
     */
    public float getHumid() {
      return humid_;
    }

    public static final int POWER_FIELD_NUMBER = 13;
    private org.mountainsensing.pb.Power.PowerInfo power_;
    /**
     * <code>optional .PowerInfo power = 13;</code>
     *
     * <pre>
     **
     * Power statistics from the power board
     * </pre>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .PowerInfo power = 13;</code>
     *
     * <pre>
     **
     * Power statistics from the power board
     * </pre>
     */
    public org.mountainsensing.pb.Power.PowerInfo getPower() {
      return power_;
    }
    /**
     * <code>optional .PowerInfo power = 13;</code>
     *
     * <pre>
     **
     * Power statistics from the power board
     * </pre>
     */
    public org.mountainsensing.pb.Power.PowerInfoOrBuilder getPowerOrBuilder() {
      return power_;
    }

    private void initFields() {
      time_ = 0;
      batt_ = 0F;
      temp_ = 0F;
      accX_ = 0;
      accY_ = 0;
      accZ_ = 0;
      aDC1_ = 0;
      aDC2_ = 0;
      rain_ = 0;
      aVR_ = com.google.protobuf.ByteString.EMPTY;
      id_ = 0;
      humid_ = 0F;
      power_ = org.mountainsensing.pb.Power.PowerInfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, batt_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, temp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, accX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, accY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, accZ_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, aDC1_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, aDC2_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, rain_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBytes(10, aVR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, id_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, humid_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, power_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, time_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, batt_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, temp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, accX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, accY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, accZ_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, aDC1_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, aDC2_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, rain_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, aVR_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, id_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, humid_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, power_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mountainsensing.pb.Readings.Sample parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mountainsensing.pb.Readings.Sample parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mountainsensing.pb.Readings.Sample parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mountainsensing.pb.Readings.Sample parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mountainsensing.pb.Readings.Sample parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mountainsensing.pb.Readings.Sample parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mountainsensing.pb.Readings.Sample parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mountainsensing.pb.Readings.Sample parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mountainsensing.pb.Readings.Sample parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mountainsensing.pb.Readings.Sample parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mountainsensing.pb.Readings.Sample prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Sample}
     *
     * <pre>
     **
     * Represents a reading made by a node
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Sample)
        org.mountainsensing.pb.Readings.SampleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mountainsensing.pb.Readings.internal_static_Sample_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mountainsensing.pb.Readings.internal_static_Sample_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mountainsensing.pb.Readings.Sample.class, org.mountainsensing.pb.Readings.Sample.Builder.class);
      }

      // Construct using org.mountainsensing.pb.Readings.Sample.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPowerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        time_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        batt_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        temp_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        accX_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        accY_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        accZ_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        aDC1_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        aDC2_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        rain_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        aVR_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        humid_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        if (powerBuilder_ == null) {
          power_ = org.mountainsensing.pb.Power.PowerInfo.getDefaultInstance();
        } else {
          powerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mountainsensing.pb.Readings.internal_static_Sample_descriptor;
      }

      public org.mountainsensing.pb.Readings.Sample getDefaultInstanceForType() {
        return org.mountainsensing.pb.Readings.Sample.getDefaultInstance();
      }

      public org.mountainsensing.pb.Readings.Sample build() {
        org.mountainsensing.pb.Readings.Sample result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mountainsensing.pb.Readings.Sample buildPartial() {
        org.mountainsensing.pb.Readings.Sample result = new org.mountainsensing.pb.Readings.Sample(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.time_ = time_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.batt_ = batt_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.temp_ = temp_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.accX_ = accX_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.accY_ = accY_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.accZ_ = accZ_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.aDC1_ = aDC1_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.aDC2_ = aDC2_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.rain_ = rain_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.aVR_ = aVR_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.humid_ = humid_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (powerBuilder_ == null) {
          result.power_ = power_;
        } else {
          result.power_ = powerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mountainsensing.pb.Readings.Sample) {
          return mergeFrom((org.mountainsensing.pb.Readings.Sample)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mountainsensing.pb.Readings.Sample other) {
        if (other == org.mountainsensing.pb.Readings.Sample.getDefaultInstance()) return this;
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasBatt()) {
          setBatt(other.getBatt());
        }
        if (other.hasTemp()) {
          setTemp(other.getTemp());
        }
        if (other.hasAccX()) {
          setAccX(other.getAccX());
        }
        if (other.hasAccY()) {
          setAccY(other.getAccY());
        }
        if (other.hasAccZ()) {
          setAccZ(other.getAccZ());
        }
        if (other.hasADC1()) {
          setADC1(other.getADC1());
        }
        if (other.hasADC2()) {
          setADC2(other.getADC2());
        }
        if (other.hasRain()) {
          setRain(other.getRain());
        }
        if (other.hasAVR()) {
          setAVR(other.getAVR());
        }
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasHumid()) {
          setHumid(other.getHumid());
        }
        if (other.hasPower()) {
          mergePower(other.getPower());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTime()) {
          
          return false;
        }
        if (!hasId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mountainsensing.pb.Readings.Sample parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mountainsensing.pb.Readings.Sample) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int time_ ;
      /**
       * <code>required fixed32 time = 1;</code>
       *
       * <pre>
       **
       * The epoch time at which the reading was taken
       * </pre>
       */
      public boolean hasTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required fixed32 time = 1;</code>
       *
       * <pre>
       **
       * The epoch time at which the reading was taken
       * </pre>
       */
      public int getTime() {
        return time_;
      }
      /**
       * <code>required fixed32 time = 1;</code>
       *
       * <pre>
       **
       * The epoch time at which the reading was taken
       * </pre>
       */
      public Builder setTime(int value) {
        bitField0_ |= 0x00000001;
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required fixed32 time = 1;</code>
       *
       * <pre>
       **
       * The epoch time at which the reading was taken
       * </pre>
       */
      public Builder clearTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        time_ = 0;
        onChanged();
        return this;
      }

      private float batt_ ;
      /**
       * <code>optional float batt = 2;</code>
       *
       * <pre>
       **
       * Battery voltage in Volts
       * </pre>
       */
      public boolean hasBatt() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float batt = 2;</code>
       *
       * <pre>
       **
       * Battery voltage in Volts
       * </pre>
       */
      public float getBatt() {
        return batt_;
      }
      /**
       * <code>optional float batt = 2;</code>
       *
       * <pre>
       **
       * Battery voltage in Volts
       * </pre>
       */
      public Builder setBatt(float value) {
        bitField0_ |= 0x00000002;
        batt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float batt = 2;</code>
       *
       * <pre>
       **
       * Battery voltage in Volts
       * </pre>
       */
      public Builder clearBatt() {
        bitField0_ = (bitField0_ & ~0x00000002);
        batt_ = 0F;
        onChanged();
        return this;
      }

      private float temp_ ;
      /**
       * <code>optional float temp = 3;</code>
       *
       * <pre>
       **
       * Temperature in Celcius
       * </pre>
       */
      public boolean hasTemp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float temp = 3;</code>
       *
       * <pre>
       **
       * Temperature in Celcius
       * </pre>
       */
      public float getTemp() {
        return temp_;
      }
      /**
       * <code>optional float temp = 3;</code>
       *
       * <pre>
       **
       * Temperature in Celcius
       * </pre>
       */
      public Builder setTemp(float value) {
        bitField0_ |= 0x00000004;
        temp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float temp = 3;</code>
       *
       * <pre>
       **
       * Temperature in Celcius
       * </pre>
       */
      public Builder clearTemp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        temp_ = 0F;
        onChanged();
        return this;
      }

      private int accX_ ;
      /**
       * <code>optional sint32 accX = 4;</code>
       *
       * <pre>
       **
       * RAW accelerometer data
       * </pre>
       */
      public boolean hasAccX() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sint32 accX = 4;</code>
       *
       * <pre>
       **
       * RAW accelerometer data
       * </pre>
       */
      public int getAccX() {
        return accX_;
      }
      /**
       * <code>optional sint32 accX = 4;</code>
       *
       * <pre>
       **
       * RAW accelerometer data
       * </pre>
       */
      public Builder setAccX(int value) {
        bitField0_ |= 0x00000008;
        accX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 accX = 4;</code>
       *
       * <pre>
       **
       * RAW accelerometer data
       * </pre>
       */
      public Builder clearAccX() {
        bitField0_ = (bitField0_ & ~0x00000008);
        accX_ = 0;
        onChanged();
        return this;
      }

      private int accY_ ;
      /**
       * <code>optional sint32 accY = 5;</code>
       */
      public boolean hasAccY() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 accY = 5;</code>
       */
      public int getAccY() {
        return accY_;
      }
      /**
       * <code>optional sint32 accY = 5;</code>
       */
      public Builder setAccY(int value) {
        bitField0_ |= 0x00000010;
        accY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 accY = 5;</code>
       */
      public Builder clearAccY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        accY_ = 0;
        onChanged();
        return this;
      }

      private int accZ_ ;
      /**
       * <code>optional sint32 accZ = 6;</code>
       */
      public boolean hasAccZ() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 accZ = 6;</code>
       */
      public int getAccZ() {
        return accZ_;
      }
      /**
       * <code>optional sint32 accZ = 6;</code>
       */
      public Builder setAccZ(int value) {
        bitField0_ |= 0x00000020;
        accZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 accZ = 6;</code>
       */
      public Builder clearAccZ() {
        bitField0_ = (bitField0_ & ~0x00000020);
        accZ_ = 0;
        onChanged();
        return this;
      }

      private int aDC1_ ;
      /**
       * <code>optional uint32 ADC1 = 7;</code>
       *
       * <pre>
       **
       * RAW data from ADC1
       * </pre>
       */
      public boolean hasADC1() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 ADC1 = 7;</code>
       *
       * <pre>
       **
       * RAW data from ADC1
       * </pre>
       */
      public int getADC1() {
        return aDC1_;
      }
      /**
       * <code>optional uint32 ADC1 = 7;</code>
       *
       * <pre>
       **
       * RAW data from ADC1
       * </pre>
       */
      public Builder setADC1(int value) {
        bitField0_ |= 0x00000040;
        aDC1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ADC1 = 7;</code>
       *
       * <pre>
       **
       * RAW data from ADC1
       * </pre>
       */
      public Builder clearADC1() {
        bitField0_ = (bitField0_ & ~0x00000040);
        aDC1_ = 0;
        onChanged();
        return this;
      }

      private int aDC2_ ;
      /**
       * <code>optional uint32 ADC2 = 8;</code>
       *
       * <pre>
       **
       * RAW data from ADC2
       * </pre>
       */
      public boolean hasADC2() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 ADC2 = 8;</code>
       *
       * <pre>
       **
       * RAW data from ADC2
       * </pre>
       */
      public int getADC2() {
        return aDC2_;
      }
      /**
       * <code>optional uint32 ADC2 = 8;</code>
       *
       * <pre>
       **
       * RAW data from ADC2
       * </pre>
       */
      public Builder setADC2(int value) {
        bitField0_ |= 0x00000080;
        aDC2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ADC2 = 8;</code>
       *
       * <pre>
       **
       * RAW data from ADC2
       * </pre>
       */
      public Builder clearADC2() {
        bitField0_ = (bitField0_ & ~0x00000080);
        aDC2_ = 0;
        onChanged();
        return this;
      }

      private int rain_ ;
      /**
       * <code>optional uint32 rain = 9;</code>
       *
       * <pre>
       **
       * RAW data from rain sensor
       * </pre>
       */
      public boolean hasRain() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 rain = 9;</code>
       *
       * <pre>
       **
       * RAW data from rain sensor
       * </pre>
       */
      public int getRain() {
        return rain_;
      }
      /**
       * <code>optional uint32 rain = 9;</code>
       *
       * <pre>
       **
       * RAW data from rain sensor
       * </pre>
       */
      public Builder setRain(int value) {
        bitField0_ |= 0x00000100;
        rain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rain = 9;</code>
       *
       * <pre>
       **
       * RAW data from rain sensor
       * </pre>
       */
      public Builder clearRain() {
        bitField0_ = (bitField0_ & ~0x00000100);
        rain_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString aVR_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes AVR = 10;</code>
       *
       * <pre>
       **
       * RAW (not delimited) protocol buffer data from AVR sensor
       * </pre>
       */
      public boolean hasAVR() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bytes AVR = 10;</code>
       *
       * <pre>
       **
       * RAW (not delimited) protocol buffer data from AVR sensor
       * </pre>
       */
      public com.google.protobuf.ByteString getAVR() {
        return aVR_;
      }
      /**
       * <code>optional bytes AVR = 10;</code>
       *
       * <pre>
       **
       * RAW (not delimited) protocol buffer data from AVR sensor
       * </pre>
       */
      public Builder setAVR(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
        aVR_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes AVR = 10;</code>
       *
       * <pre>
       **
       * RAW (not delimited) protocol buffer data from AVR sensor
       * </pre>
       */
      public Builder clearAVR() {
        bitField0_ = (bitField0_ & ~0x00000200);
        aVR_ = getDefaultInstance().getAVR();
        onChanged();
        return this;
      }

      private int id_ ;
      /**
       * <code>required uint32 id = 11;</code>
       *
       * <pre>
       **
       * The identifier of this reading
       * Unique for the lifetime of the reading on the node
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required uint32 id = 11;</code>
       *
       * <pre>
       **
       * The identifier of this reading
       * Unique for the lifetime of the reading on the node
       * </pre>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 11;</code>
       *
       * <pre>
       **
       * The identifier of this reading
       * Unique for the lifetime of the reading on the node
       * </pre>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000400;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 id = 11;</code>
       *
       * <pre>
       **
       * The identifier of this reading
       * Unique for the lifetime of the reading on the node
       * </pre>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000400);
        id_ = 0;
        onChanged();
        return this;
      }

      private float humid_ ;
      /**
       * <code>optional float humid = 12;</code>
       *
       * <pre>
       **
       * The humidity in percentage (0-100)
       * </pre>
       */
      public boolean hasHumid() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float humid = 12;</code>
       *
       * <pre>
       **
       * The humidity in percentage (0-100)
       * </pre>
       */
      public float getHumid() {
        return humid_;
      }
      /**
       * <code>optional float humid = 12;</code>
       *
       * <pre>
       **
       * The humidity in percentage (0-100)
       * </pre>
       */
      public Builder setHumid(float value) {
        bitField0_ |= 0x00000800;
        humid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float humid = 12;</code>
       *
       * <pre>
       **
       * The humidity in percentage (0-100)
       * </pre>
       */
      public Builder clearHumid() {
        bitField0_ = (bitField0_ & ~0x00000800);
        humid_ = 0F;
        onChanged();
        return this;
      }

      private org.mountainsensing.pb.Power.PowerInfo power_ = org.mountainsensing.pb.Power.PowerInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.mountainsensing.pb.Power.PowerInfo, org.mountainsensing.pb.Power.PowerInfo.Builder, org.mountainsensing.pb.Power.PowerInfoOrBuilder> powerBuilder_;
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public org.mountainsensing.pb.Power.PowerInfo getPower() {
        if (powerBuilder_ == null) {
          return power_;
        } else {
          return powerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public Builder setPower(org.mountainsensing.pb.Power.PowerInfo value) {
        if (powerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          power_ = value;
          onChanged();
        } else {
          powerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public Builder setPower(
          org.mountainsensing.pb.Power.PowerInfo.Builder builderForValue) {
        if (powerBuilder_ == null) {
          power_ = builderForValue.build();
          onChanged();
        } else {
          powerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public Builder mergePower(org.mountainsensing.pb.Power.PowerInfo value) {
        if (powerBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              power_ != org.mountainsensing.pb.Power.PowerInfo.getDefaultInstance()) {
            power_ =
              org.mountainsensing.pb.Power.PowerInfo.newBuilder(power_).mergeFrom(value).buildPartial();
          } else {
            power_ = value;
          }
          onChanged();
        } else {
          powerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public Builder clearPower() {
        if (powerBuilder_ == null) {
          power_ = org.mountainsensing.pb.Power.PowerInfo.getDefaultInstance();
          onChanged();
        } else {
          powerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public org.mountainsensing.pb.Power.PowerInfo.Builder getPowerBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getPowerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      public org.mountainsensing.pb.Power.PowerInfoOrBuilder getPowerOrBuilder() {
        if (powerBuilder_ != null) {
          return powerBuilder_.getMessageOrBuilder();
        } else {
          return power_;
        }
      }
      /**
       * <code>optional .PowerInfo power = 13;</code>
       *
       * <pre>
       **
       * Power statistics from the power board
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.mountainsensing.pb.Power.PowerInfo, org.mountainsensing.pb.Power.PowerInfo.Builder, org.mountainsensing.pb.Power.PowerInfoOrBuilder> 
          getPowerFieldBuilder() {
        if (powerBuilder_ == null) {
          powerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.mountainsensing.pb.Power.PowerInfo, org.mountainsensing.pb.Power.PowerInfo.Builder, org.mountainsensing.pb.Power.PowerInfoOrBuilder>(
                  getPower(),
                  getParentForChildren(),
                  isClean());
          power_ = null;
        }
        return powerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:Sample)
    }

    static {
      defaultInstance = new Sample(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Sample)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Sample_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Sample_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016readings.proto\032\013power.proto\"\311\001\n\006Sample" +
      "\022\014\n\004time\030\001 \002(\007\022\014\n\004batt\030\002 \001(\002\022\014\n\004temp\030\003 \001" +
      "(\002\022\014\n\004accX\030\004 \001(\021\022\014\n\004accY\030\005 \001(\021\022\014\n\004accZ\030\006" +
      " \001(\021\022\014\n\004ADC1\030\007 \001(\r\022\014\n\004ADC2\030\010 \001(\r\022\014\n\004rain" +
      "\030\t \001(\r\022\013\n\003AVR\030\n \001(\014\022\n\n\002id\030\013 \002(\r\022\r\n\005humid" +
      "\030\014 \001(\002\022\031\n\005power\030\r \001(\0132\n.PowerInfoB\030\n\026org" +
      ".mountainsensing.pb"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.mountainsensing.pb.Power.getDescriptor(),
        }, assigner);
    internal_static_Sample_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Sample_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_Sample_descriptor,
        new java.lang.String[] { "Time", "Batt", "Temp", "AccX", "AccY", "AccZ", "ADC1", "ADC2", "Rain", "AVR", "Id", "Humid", "Power", });
    org.mountainsensing.pb.Power.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
