// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: settings.proto

package org.mountainsensing.pb;

public final class Settings {
  private Settings() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SensorConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SensorConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required bool hasADC1 = 1;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    boolean hasHasADC1();
    /**
     * <code>required bool hasADC1 = 1;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    boolean getHasADC1();

    /**
     * <code>required bool hasADC2 = 2;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    boolean hasHasADC2();
    /**
     * <code>required bool hasADC2 = 2;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    boolean getHasADC2();

    /**
     * <code>required bool hasRain = 3;</code>
     *
     * <pre>
     **
     * True if a rain sensor is connected to the node,
     * and it should be sampled.
     * </pre>
     */
    boolean hasHasRain();
    /**
     * <code>required bool hasRain = 3;</code>
     *
     * <pre>
     **
     * True if a rain sensor is connected to the node,
     * and it should be sampled.
     * </pre>
     */
    boolean getHasRain();

    /**
     * <code>optional uint32 avrID = 4;</code>
     *
     * <pre>
     **
     * ID of the AVR sensor connected to the node
     * </pre>
     */
    boolean hasAvrID();
    /**
     * <code>optional uint32 avrID = 4;</code>
     *
     * <pre>
     **
     * ID of the AVR sensor connected to the node
     * </pre>
     */
    int getAvrID();

    /**
     * <code>required uint32 interval = 5;</code>
     *
     * <pre>
     **
     * Sampling interval in seconds
     * </pre>
     */
    boolean hasInterval();
    /**
     * <code>required uint32 interval = 5;</code>
     *
     * <pre>
     **
     * Sampling interval in seconds
     * </pre>
     */
    int getInterval();

    /**
     * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
     *
     * <pre>
     **
     * The routing mode for this node.
     * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
     * FEATHER makes the node a simple relay, nothing can be routed to / from it.
     * LEAF makes the node accessible over the network, but prohibits it from having children routes.
     * </pre>
     */
    boolean hasRoutingMode();
    /**
     * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
     *
     * <pre>
     **
     * The routing mode for this node.
     * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
     * FEATHER makes the node a simple relay, nothing can be routed to / from it.
     * LEAF makes the node accessible over the network, but prohibits it from having children routes.
     * </pre>
     */
    org.mountainsensing.pb.Settings.SensorConfig.RoutingMode getRoutingMode();

    /**
     * <code>optional uint32 powerID = 7;</code>
     *
     * <pre>
     **
     * ID of the power module connected to the node
     * </pre>
     */
    boolean hasPowerID();
    /**
     * <code>optional uint32 powerID = 7;</code>
     *
     * <pre>
     **
     * ID of the power module connected to the node
     * </pre>
     */
    int getPowerID();
  }
  /**
   * Protobuf type {@code SensorConfig}
   */
  public static final class SensorConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:SensorConfig)
      SensorConfigOrBuilder {
    // Use SensorConfig.newBuilder() to construct.
    private SensorConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorConfig defaultInstance;
    public static SensorConfig getDefaultInstance() {
      return defaultInstance;
    }

    public SensorConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              hasADC1_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              hasADC2_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              hasRain_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              avrID_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              interval_ = input.readUInt32();
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              org.mountainsensing.pb.Settings.SensorConfig.RoutingMode value = org.mountainsensing.pb.Settings.SensorConfig.RoutingMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                routingMode_ = value;
              }
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              powerID_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.mountainsensing.pb.Settings.internal_static_SensorConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.mountainsensing.pb.Settings.internal_static_SensorConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.mountainsensing.pb.Settings.SensorConfig.class, org.mountainsensing.pb.Settings.SensorConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<SensorConfig> PARSER =
        new com.google.protobuf.AbstractParser<SensorConfig>() {
      public SensorConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SensorConfig> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code SensorConfig.RoutingMode}
     */
    public enum RoutingMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MESH = 0;</code>
       */
      MESH(0, 0),
      /**
       * <code>FEATHER = 1;</code>
       */
      FEATHER(1, 1),
      /**
       * <code>LEAF = 2;</code>
       */
      LEAF(2, 2),
      ;

      /**
       * <code>MESH = 0;</code>
       */
      public static final int MESH_VALUE = 0;
      /**
       * <code>FEATHER = 1;</code>
       */
      public static final int FEATHER_VALUE = 1;
      /**
       * <code>LEAF = 2;</code>
       */
      public static final int LEAF_VALUE = 2;


      public final int getNumber() { return value; }

      public static RoutingMode valueOf(int value) {
        switch (value) {
          case 0: return MESH;
          case 1: return FEATHER;
          case 2: return LEAF;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RoutingMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RoutingMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RoutingMode>() {
              public RoutingMode findValueByNumber(int number) {
                return RoutingMode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.mountainsensing.pb.Settings.SensorConfig.getDescriptor().getEnumTypes().get(0);
      }

      private static final RoutingMode[] VALUES = values();

      public static RoutingMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private RoutingMode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:SensorConfig.RoutingMode)
    }

    private int bitField0_;
    public static final int HASADC1_FIELD_NUMBER = 1;
    private boolean hasADC1_;
    /**
     * <code>required bool hasADC1 = 1;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    public boolean hasHasADC1() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool hasADC1 = 1;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    public boolean getHasADC1() {
      return hasADC1_;
    }

    public static final int HASADC2_FIELD_NUMBER = 2;
    private boolean hasADC2_;
    /**
     * <code>required bool hasADC2 = 2;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    public boolean hasHasADC2() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bool hasADC2 = 2;</code>
     *
     * <pre>
     **
     * True if something is connected to ADC2
     * and it should be sampled.
     * </pre>
     */
    public boolean getHasADC2() {
      return hasADC2_;
    }

    public static final int HASRAIN_FIELD_NUMBER = 3;
    private boolean hasRain_;
    /**
     * <code>required bool hasRain = 3;</code>
     *
     * <pre>
     **
     * True if a rain sensor is connected to the node,
     * and it should be sampled.
     * </pre>
     */
    public boolean hasHasRain() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bool hasRain = 3;</code>
     *
     * <pre>
     **
     * True if a rain sensor is connected to the node,
     * and it should be sampled.
     * </pre>
     */
    public boolean getHasRain() {
      return hasRain_;
    }

    public static final int AVRID_FIELD_NUMBER = 4;
    private int avrID_;
    /**
     * <code>optional uint32 avrID = 4;</code>
     *
     * <pre>
     **
     * ID of the AVR sensor connected to the node
     * </pre>
     */
    public boolean hasAvrID() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 avrID = 4;</code>
     *
     * <pre>
     **
     * ID of the AVR sensor connected to the node
     * </pre>
     */
    public int getAvrID() {
      return avrID_;
    }

    public static final int INTERVAL_FIELD_NUMBER = 5;
    private int interval_;
    /**
     * <code>required uint32 interval = 5;</code>
     *
     * <pre>
     **
     * Sampling interval in seconds
     * </pre>
     */
    public boolean hasInterval() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 interval = 5;</code>
     *
     * <pre>
     **
     * Sampling interval in seconds
     * </pre>
     */
    public int getInterval() {
      return interval_;
    }

    public static final int ROUTINGMODE_FIELD_NUMBER = 6;
    private org.mountainsensing.pb.Settings.SensorConfig.RoutingMode routingMode_;
    /**
     * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
     *
     * <pre>
     **
     * The routing mode for this node.
     * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
     * FEATHER makes the node a simple relay, nothing can be routed to / from it.
     * LEAF makes the node accessible over the network, but prohibits it from having children routes.
     * </pre>
     */
    public boolean hasRoutingMode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
     *
     * <pre>
     **
     * The routing mode for this node.
     * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
     * FEATHER makes the node a simple relay, nothing can be routed to / from it.
     * LEAF makes the node accessible over the network, but prohibits it from having children routes.
     * </pre>
     */
    public org.mountainsensing.pb.Settings.SensorConfig.RoutingMode getRoutingMode() {
      return routingMode_;
    }

    public static final int POWERID_FIELD_NUMBER = 7;
    private int powerID_;
    /**
     * <code>optional uint32 powerID = 7;</code>
     *
     * <pre>
     **
     * ID of the power module connected to the node
     * </pre>
     */
    public boolean hasPowerID() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 powerID = 7;</code>
     *
     * <pre>
     **
     * ID of the power module connected to the node
     * </pre>
     */
    public int getPowerID() {
      return powerID_;
    }

    private void initFields() {
      hasADC1_ = false;
      hasADC2_ = false;
      hasRain_ = false;
      avrID_ = 0;
      interval_ = 0;
      routingMode_ = org.mountainsensing.pb.Settings.SensorConfig.RoutingMode.MESH;
      powerID_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHasADC1()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHasADC2()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHasRain()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInterval()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRoutingMode()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, hasADC1_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, hasADC2_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, hasRain_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, avrID_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, interval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, routingMode_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, powerID_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, hasADC1_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, hasADC2_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, hasRain_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, avrID_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, interval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, routingMode_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, powerID_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.mountainsensing.pb.Settings.SensorConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mountainsensing.pb.Settings.SensorConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SensorConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SensorConfig)
        org.mountainsensing.pb.Settings.SensorConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.mountainsensing.pb.Settings.internal_static_SensorConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.mountainsensing.pb.Settings.internal_static_SensorConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.mountainsensing.pb.Settings.SensorConfig.class, org.mountainsensing.pb.Settings.SensorConfig.Builder.class);
      }

      // Construct using org.mountainsensing.pb.Settings.SensorConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hasADC1_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        hasADC2_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        hasRain_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        avrID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        interval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        routingMode_ = org.mountainsensing.pb.Settings.SensorConfig.RoutingMode.MESH;
        bitField0_ = (bitField0_ & ~0x00000020);
        powerID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.mountainsensing.pb.Settings.internal_static_SensorConfig_descriptor;
      }

      public org.mountainsensing.pb.Settings.SensorConfig getDefaultInstanceForType() {
        return org.mountainsensing.pb.Settings.SensorConfig.getDefaultInstance();
      }

      public org.mountainsensing.pb.Settings.SensorConfig build() {
        org.mountainsensing.pb.Settings.SensorConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.mountainsensing.pb.Settings.SensorConfig buildPartial() {
        org.mountainsensing.pb.Settings.SensorConfig result = new org.mountainsensing.pb.Settings.SensorConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hasADC1_ = hasADC1_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.hasADC2_ = hasADC2_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.hasRain_ = hasRain_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.avrID_ = avrID_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.interval_ = interval_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.routingMode_ = routingMode_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.powerID_ = powerID_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.mountainsensing.pb.Settings.SensorConfig) {
          return mergeFrom((org.mountainsensing.pb.Settings.SensorConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.mountainsensing.pb.Settings.SensorConfig other) {
        if (other == org.mountainsensing.pb.Settings.SensorConfig.getDefaultInstance()) return this;
        if (other.hasHasADC1()) {
          setHasADC1(other.getHasADC1());
        }
        if (other.hasHasADC2()) {
          setHasADC2(other.getHasADC2());
        }
        if (other.hasHasRain()) {
          setHasRain(other.getHasRain());
        }
        if (other.hasAvrID()) {
          setAvrID(other.getAvrID());
        }
        if (other.hasInterval()) {
          setInterval(other.getInterval());
        }
        if (other.hasRoutingMode()) {
          setRoutingMode(other.getRoutingMode());
        }
        if (other.hasPowerID()) {
          setPowerID(other.getPowerID());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHasADC1()) {
          
          return false;
        }
        if (!hasHasADC2()) {
          
          return false;
        }
        if (!hasHasRain()) {
          
          return false;
        }
        if (!hasInterval()) {
          
          return false;
        }
        if (!hasRoutingMode()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.mountainsensing.pb.Settings.SensorConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.mountainsensing.pb.Settings.SensorConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean hasADC1_ ;
      /**
       * <code>required bool hasADC1 = 1;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public boolean hasHasADC1() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool hasADC1 = 1;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public boolean getHasADC1() {
        return hasADC1_;
      }
      /**
       * <code>required bool hasADC1 = 1;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public Builder setHasADC1(boolean value) {
        bitField0_ |= 0x00000001;
        hasADC1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool hasADC1 = 1;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public Builder clearHasADC1() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hasADC1_ = false;
        onChanged();
        return this;
      }

      private boolean hasADC2_ ;
      /**
       * <code>required bool hasADC2 = 2;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public boolean hasHasADC2() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bool hasADC2 = 2;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public boolean getHasADC2() {
        return hasADC2_;
      }
      /**
       * <code>required bool hasADC2 = 2;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public Builder setHasADC2(boolean value) {
        bitField0_ |= 0x00000002;
        hasADC2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool hasADC2 = 2;</code>
       *
       * <pre>
       **
       * True if something is connected to ADC2
       * and it should be sampled.
       * </pre>
       */
      public Builder clearHasADC2() {
        bitField0_ = (bitField0_ & ~0x00000002);
        hasADC2_ = false;
        onChanged();
        return this;
      }

      private boolean hasRain_ ;
      /**
       * <code>required bool hasRain = 3;</code>
       *
       * <pre>
       **
       * True if a rain sensor is connected to the node,
       * and it should be sampled.
       * </pre>
       */
      public boolean hasHasRain() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bool hasRain = 3;</code>
       *
       * <pre>
       **
       * True if a rain sensor is connected to the node,
       * and it should be sampled.
       * </pre>
       */
      public boolean getHasRain() {
        return hasRain_;
      }
      /**
       * <code>required bool hasRain = 3;</code>
       *
       * <pre>
       **
       * True if a rain sensor is connected to the node,
       * and it should be sampled.
       * </pre>
       */
      public Builder setHasRain(boolean value) {
        bitField0_ |= 0x00000004;
        hasRain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool hasRain = 3;</code>
       *
       * <pre>
       **
       * True if a rain sensor is connected to the node,
       * and it should be sampled.
       * </pre>
       */
      public Builder clearHasRain() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hasRain_ = false;
        onChanged();
        return this;
      }

      private int avrID_ ;
      /**
       * <code>optional uint32 avrID = 4;</code>
       *
       * <pre>
       **
       * ID of the AVR sensor connected to the node
       * </pre>
       */
      public boolean hasAvrID() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 avrID = 4;</code>
       *
       * <pre>
       **
       * ID of the AVR sensor connected to the node
       * </pre>
       */
      public int getAvrID() {
        return avrID_;
      }
      /**
       * <code>optional uint32 avrID = 4;</code>
       *
       * <pre>
       **
       * ID of the AVR sensor connected to the node
       * </pre>
       */
      public Builder setAvrID(int value) {
        bitField0_ |= 0x00000008;
        avrID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 avrID = 4;</code>
       *
       * <pre>
       **
       * ID of the AVR sensor connected to the node
       * </pre>
       */
      public Builder clearAvrID() {
        bitField0_ = (bitField0_ & ~0x00000008);
        avrID_ = 0;
        onChanged();
        return this;
      }

      private int interval_ ;
      /**
       * <code>required uint32 interval = 5;</code>
       *
       * <pre>
       **
       * Sampling interval in seconds
       * </pre>
       */
      public boolean hasInterval() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 interval = 5;</code>
       *
       * <pre>
       **
       * Sampling interval in seconds
       * </pre>
       */
      public int getInterval() {
        return interval_;
      }
      /**
       * <code>required uint32 interval = 5;</code>
       *
       * <pre>
       **
       * Sampling interval in seconds
       * </pre>
       */
      public Builder setInterval(int value) {
        bitField0_ |= 0x00000010;
        interval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 interval = 5;</code>
       *
       * <pre>
       **
       * Sampling interval in seconds
       * </pre>
       */
      public Builder clearInterval() {
        bitField0_ = (bitField0_ & ~0x00000010);
        interval_ = 0;
        onChanged();
        return this;
      }

      private org.mountainsensing.pb.Settings.SensorConfig.RoutingMode routingMode_ = org.mountainsensing.pb.Settings.SensorConfig.RoutingMode.MESH;
      /**
       * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
       *
       * <pre>
       **
       * The routing mode for this node.
       * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
       * FEATHER makes the node a simple relay, nothing can be routed to / from it.
       * LEAF makes the node accessible over the network, but prohibits it from having children routes.
       * </pre>
       */
      public boolean hasRoutingMode() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
       *
       * <pre>
       **
       * The routing mode for this node.
       * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
       * FEATHER makes the node a simple relay, nothing can be routed to / from it.
       * LEAF makes the node accessible over the network, but prohibits it from having children routes.
       * </pre>
       */
      public org.mountainsensing.pb.Settings.SensorConfig.RoutingMode getRoutingMode() {
        return routingMode_;
      }
      /**
       * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
       *
       * <pre>
       **
       * The routing mode for this node.
       * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
       * FEATHER makes the node a simple relay, nothing can be routed to / from it.
       * LEAF makes the node accessible over the network, but prohibits it from having children routes.
       * </pre>
       */
      public Builder setRoutingMode(org.mountainsensing.pb.Settings.SensorConfig.RoutingMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        routingMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .SensorConfig.RoutingMode routingMode = 6;</code>
       *
       * <pre>
       **
       * The routing mode for this node.
       * MESH sets the node as a potential parent, ie it will handle packets on the behalf of other nodes.
       * FEATHER makes the node a simple relay, nothing can be routed to / from it.
       * LEAF makes the node accessible over the network, but prohibits it from having children routes.
       * </pre>
       */
      public Builder clearRoutingMode() {
        bitField0_ = (bitField0_ & ~0x00000020);
        routingMode_ = org.mountainsensing.pb.Settings.SensorConfig.RoutingMode.MESH;
        onChanged();
        return this;
      }

      private int powerID_ ;
      /**
       * <code>optional uint32 powerID = 7;</code>
       *
       * <pre>
       **
       * ID of the power module connected to the node
       * </pre>
       */
      public boolean hasPowerID() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 powerID = 7;</code>
       *
       * <pre>
       **
       * ID of the power module connected to the node
       * </pre>
       */
      public int getPowerID() {
        return powerID_;
      }
      /**
       * <code>optional uint32 powerID = 7;</code>
       *
       * <pre>
       **
       * ID of the power module connected to the node
       * </pre>
       */
      public Builder setPowerID(int value) {
        bitField0_ |= 0x00000040;
        powerID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 powerID = 7;</code>
       *
       * <pre>
       **
       * ID of the power module connected to the node
       * </pre>
       */
      public Builder clearPowerID() {
        bitField0_ = (bitField0_ & ~0x00000040);
        powerID_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:SensorConfig)
    }

    static {
      defaultInstance = new SensorConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:SensorConfig)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SensorConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_SensorConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016settings.proto\"\323\001\n\014SensorConfig\022\017\n\007has" +
      "ADC1\030\001 \002(\010\022\017\n\007hasADC2\030\002 \002(\010\022\017\n\007hasRain\030\003" +
      " \002(\010\022\r\n\005avrID\030\004 \001(\r\022\020\n\010interval\030\005 \002(\r\022.\n" +
      "\013routingMode\030\006 \002(\0162\031.SensorConfig.Routin" +
      "gMode\022\017\n\007powerID\030\007 \001(\r\".\n\013RoutingMode\022\010\n" +
      "\004MESH\020\000\022\013\n\007FEATHER\020\001\022\010\n\004LEAF\020\002B\030\n\026org.mo" +
      "untainsensing.pb"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_SensorConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_SensorConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_SensorConfig_descriptor,
        new java.lang.String[] { "HasADC1", "HasADC2", "HasRain", "AvrID", "Interval", "RoutingMode", "PowerID", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
