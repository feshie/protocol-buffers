/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 */

#ifndef PB_READINGS_PB_H_INCLUDED
#define PB_READINGS_PB_H_INCLUDED
#include "pb.h"
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef PB_BYTES_ARRAY_T(92) Sample_AVR_t;
typedef struct _Sample {
    uint32_t time;
    bool has_batt;
    float batt;
    bool has_temp;
    float temp;
    bool has_accX;
    int32_t accX;
    bool has_accY;
    int32_t accY;
    bool has_accZ;
    int32_t accZ;
    bool has_ADC1;
    uint32_t ADC1;
    bool has_ADC2;
    uint32_t ADC2;
    bool has_rain;
    uint32_t rain;
    bool has_AVR;
    Sample_AVR_t AVR;
} Sample;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Sample_init_default                      {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, {0, {0}}}
#define Sample_init_zero                         {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, {0, {0}}}

/* Field tags (for use in manual encoding/decoding) */
#define Sample_time_tag                          1
#define Sample_batt_tag                          2
#define Sample_temp_tag                          3
#define Sample_accX_tag                          4
#define Sample_accY_tag                          5
#define Sample_accZ_tag                          6
#define Sample_ADC1_tag                          7
#define Sample_ADC2_tag                          8
#define Sample_rain_tag                          9
#define Sample_AVR_tag                           10

/* Struct field encoding specification for nanopb */
extern const pb_field_t Sample_fields[11];

/* Maximum encoded size of messages (where known) */
#define Sample_size                              145

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define READINGS_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
