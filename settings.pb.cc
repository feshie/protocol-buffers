// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: settings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SensorConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SensorConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* POSTConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POSTConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_settings_2eproto() {
  protobuf_AddDesc_settings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "settings.proto");
  GOOGLE_CHECK(file != NULL);
  SensorConfig_descriptor_ = file->message_type(0);
  static const int SensorConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, hasadc1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, hasadc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, hasrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, avrids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, interval_),
  };
  SensorConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SensorConfig_descriptor_,
      SensorConfig::default_instance_,
      SensorConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SensorConfig));
  POSTConfig_descriptor_ = file->message_type(1);
  static const int POSTConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSTConfig, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSTConfig, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSTConfig, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSTConfig, offset_),
  };
  POSTConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POSTConfig_descriptor_,
      POSTConfig::default_instance_,
      POSTConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSTConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POSTConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POSTConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_settings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SensorConfig_descriptor_, &SensorConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POSTConfig_descriptor_, &POSTConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_settings_2eproto() {
  delete SensorConfig::default_instance_;
  delete SensorConfig_reflection_;
  delete POSTConfig::default_instance_;
  delete POSTConfig_reflection_;
}

void protobuf_AddDesc_settings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016settings.proto\"c\n\014SensorConfig\022\017\n\007hasA"
    "DC1\030\001 \002(\010\022\017\n\007hasADC2\030\002 \002(\010\022\017\n\007hasRain\030\003 "
    "\002(\010\022\016\n\006avrIDs\030\004 \003(\r\022\020\n\010interval\030\005 \002(\004\"H\n"
    "\nPOSTConfig\022\n\n\002ip\030\001 \003(\r\022\014\n\004port\030\002 \002(\r\022\020\n"
    "\010interval\030\003 \002(\004\022\016\n\006offset\030\004 \001(\004", 191);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "settings.proto", &protobuf_RegisterTypes);
  SensorConfig::default_instance_ = new SensorConfig();
  POSTConfig::default_instance_ = new POSTConfig();
  SensorConfig::default_instance_->InitAsDefaultInstance();
  POSTConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_settings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_settings_2eproto {
  StaticDescriptorInitializer_settings_2eproto() {
    protobuf_AddDesc_settings_2eproto();
  }
} static_descriptor_initializer_settings_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SensorConfig::kHasADC1FieldNumber;
const int SensorConfig::kHasADC2FieldNumber;
const int SensorConfig::kHasRainFieldNumber;
const int SensorConfig::kAvrIDsFieldNumber;
const int SensorConfig::kIntervalFieldNumber;
#endif  // !_MSC_VER

SensorConfig::SensorConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SensorConfig::InitAsDefaultInstance() {
}

SensorConfig::SensorConfig(const SensorConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SensorConfig::SharedCtor() {
  _cached_size_ = 0;
  hasadc1_ = false;
  hasadc2_ = false;
  hasrain_ = false;
  interval_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorConfig::~SensorConfig() {
  SharedDtor();
}

void SensorConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SensorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SensorConfig_descriptor_;
}

const SensorConfig& SensorConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
  return *default_instance_;
}

SensorConfig* SensorConfig::default_instance_ = NULL;

SensorConfig* SensorConfig::New() const {
  return new SensorConfig;
}

void SensorConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasadc1_ = false;
    hasadc2_ = false;
    hasrain_ = false;
    interval_ = GOOGLE_ULONGLONG(0);
  }
  avrids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SensorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool hasADC1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasadc1_)));
          set_has_hasadc1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasADC2;
        break;
      }

      // required bool hasADC2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasADC2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasadc2_)));
          set_has_hasadc2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasRain;
        break;
      }

      // required bool hasRain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasRain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasrain_)));
          set_has_hasrain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_avrIDs;
        break;
      }

      // repeated uint32 avrIDs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avrIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_avrids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_avrids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_avrIDs;
        if (input->ExpectTag(40)) goto parse_interval;
        break;
      }

      // required uint64 interval = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool hasADC1 = 1;
  if (has_hasadc1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasadc1(), output);
  }

  // required bool hasADC2 = 2;
  if (has_hasadc2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasadc2(), output);
  }

  // required bool hasRain = 3;
  if (has_hasrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasrain(), output);
  }

  // repeated uint32 avrIDs = 4;
  for (int i = 0; i < this->avrids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->avrids(i), output);
  }

  // required uint64 interval = 5;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SensorConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool hasADC1 = 1;
  if (has_hasadc1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasadc1(), target);
  }

  // required bool hasADC2 = 2;
  if (has_hasadc2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasadc2(), target);
  }

  // required bool hasRain = 3;
  if (has_hasrain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hasrain(), target);
  }

  // repeated uint32 avrIDs = 4;
  for (int i = 0; i < this->avrids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->avrids(i), target);
  }

  // required uint64 interval = 5;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SensorConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool hasADC1 = 1;
    if (has_hasadc1()) {
      total_size += 1 + 1;
    }

    // required bool hasADC2 = 2;
    if (has_hasadc2()) {
      total_size += 1 + 1;
    }

    // required bool hasRain = 3;
    if (has_hasrain()) {
      total_size += 1 + 1;
    }

    // required uint64 interval = 5;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->interval());
    }

  }
  // repeated uint32 avrIDs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->avrids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->avrids(i));
    }
    total_size += 1 * this->avrids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SensorConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SensorConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SensorConfig::MergeFrom(const SensorConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  avrids_.MergeFrom(from.avrids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasadc1()) {
      set_hasadc1(from.hasadc1());
    }
    if (from.has_hasadc2()) {
      set_hasadc2(from.hasadc2());
    }
    if (from.has_hasrain()) {
      set_hasrain(from.hasrain());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SensorConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorConfig::CopyFrom(const SensorConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void SensorConfig::Swap(SensorConfig* other) {
  if (other != this) {
    std::swap(hasadc1_, other->hasadc1_);
    std::swap(hasadc2_, other->hasadc2_);
    std::swap(hasrain_, other->hasrain_);
    avrids_.Swap(&other->avrids_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SensorConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SensorConfig_descriptor_;
  metadata.reflection = SensorConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POSTConfig::kIpFieldNumber;
const int POSTConfig::kPortFieldNumber;
const int POSTConfig::kIntervalFieldNumber;
const int POSTConfig::kOffsetFieldNumber;
#endif  // !_MSC_VER

POSTConfig::POSTConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void POSTConfig::InitAsDefaultInstance() {
}

POSTConfig::POSTConfig(const POSTConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void POSTConfig::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  interval_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POSTConfig::~POSTConfig() {
  SharedDtor();
}

void POSTConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void POSTConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POSTConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POSTConfig_descriptor_;
}

const POSTConfig& POSTConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_settings_2eproto();
  return *default_instance_;
}

POSTConfig* POSTConfig::default_instance_ = NULL;

POSTConfig* POSTConfig::New() const {
  return new POSTConfig;
}

void POSTConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    port_ = 0u;
    interval_ = GOOGLE_ULONGLONG(0);
    offset_ = GOOGLE_ULONGLONG(0);
  }
  ip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POSTConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ip())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ip())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ip;
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_interval;
        break;
      }

      // required uint64 interval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional uint64 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void POSTConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 ip = 1;
  for (int i = 0; i < this->ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ip(i), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required uint64 interval = 3;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->interval(), output);
  }

  // optional uint64 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* POSTConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 ip = 1;
  for (int i = 0; i < this->ip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ip(i), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required uint64 interval = 3;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->interval(), target);
  }

  // optional uint64 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int POSTConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint64 interval = 3;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->interval());
    }

    // optional uint64 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

  }
  // repeated uint32 ip = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ip(i));
    }
    total_size += 1 * this->ip_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POSTConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POSTConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POSTConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POSTConfig::MergeFrom(const POSTConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_.MergeFrom(from.ip_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POSTConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POSTConfig::CopyFrom(const POSTConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POSTConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void POSTConfig::Swap(POSTConfig* other) {
  if (other != this) {
    ip_.Swap(&other->ip_);
    std::swap(port_, other->port_);
    std::swap(interval_, other->interval_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POSTConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POSTConfig_descriptor_;
  metadata.reflection = POSTConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
