// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rs485_message.proto

#ifndef PROTOBUF_rs485_5fmessage_2eproto__INCLUDED
#define PROTOBUF_rs485_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rs485_5fmessage_2eproto();
void protobuf_AssignDesc_rs485_5fmessage_2eproto();
void protobuf_ShutdownFile_rs485_5fmessage_2eproto();

class Rs485;

enum Rs485_Type {
  Rs485_Type_CMD = 0,
  Rs485_Type_DATA = 1
};
bool Rs485_Type_IsValid(int value);
const Rs485_Type Rs485_Type_Type_MIN = Rs485_Type_CMD;
const Rs485_Type Rs485_Type_Type_MAX = Rs485_Type_DATA;
const int Rs485_Type_Type_ARRAYSIZE = Rs485_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Rs485_Type_descriptor();
inline const ::std::string& Rs485_Type_Name(Rs485_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Rs485_Type_descriptor(), value);
}
inline bool Rs485_Type_Parse(
    const ::std::string& name, Rs485_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Rs485_Type>(
    Rs485_Type_descriptor(), name, value);
}
enum Rs485_Cmd {
  Rs485_Cmd_READ_1W = 0,
  Rs485_Cmd_READ_TA_CHAIN = 1,
  Rs485_Cmd_READ_ADC0 = 2,
  Rs485_Cmd_READ_ADC1 = 3,
  Rs485_Cmd_READ_ADC2 = 4,
  Rs485_Cmd_READ_ADC3 = 5
};
bool Rs485_Cmd_IsValid(int value);
const Rs485_Cmd Rs485_Cmd_Cmd_MIN = Rs485_Cmd_READ_1W;
const Rs485_Cmd Rs485_Cmd_Cmd_MAX = Rs485_Cmd_READ_ADC3;
const int Rs485_Cmd_Cmd_ARRAYSIZE = Rs485_Cmd_Cmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* Rs485_Cmd_descriptor();
inline const ::std::string& Rs485_Cmd_Name(Rs485_Cmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    Rs485_Cmd_descriptor(), value);
}
inline bool Rs485_Cmd_Parse(
    const ::std::string& name, Rs485_Cmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Rs485_Cmd>(
    Rs485_Cmd_descriptor(), name, value);
}
// ===================================================================

class Rs485 : public ::google::protobuf::Message {
 public:
  Rs485();
  virtual ~Rs485();

  Rs485(const Rs485& from);

  inline Rs485& operator=(const Rs485& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rs485& default_instance();

  void Swap(Rs485* other);

  // implements Message ----------------------------------------------

  Rs485* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rs485& from);
  void MergeFrom(const Rs485& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Rs485_Type Type;
  static const Type CMD = Rs485_Type_CMD;
  static const Type DATA = Rs485_Type_DATA;
  static inline bool Type_IsValid(int value) {
    return Rs485_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Rs485_Type_Type_MIN;
  static const Type Type_MAX =
    Rs485_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Rs485_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Rs485_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Rs485_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Rs485_Type_Parse(name, value);
  }

  typedef Rs485_Cmd Cmd;
  static const Cmd READ_1W = Rs485_Cmd_READ_1W;
  static const Cmd READ_TA_CHAIN = Rs485_Cmd_READ_TA_CHAIN;
  static const Cmd READ_ADC0 = Rs485_Cmd_READ_ADC0;
  static const Cmd READ_ADC1 = Rs485_Cmd_READ_ADC1;
  static const Cmd READ_ADC2 = Rs485_Cmd_READ_ADC2;
  static const Cmd READ_ADC3 = Rs485_Cmd_READ_ADC3;
  static inline bool Cmd_IsValid(int value) {
    return Rs485_Cmd_IsValid(value);
  }
  static const Cmd Cmd_MIN =
    Rs485_Cmd_Cmd_MIN;
  static const Cmd Cmd_MAX =
    Rs485_Cmd_Cmd_MAX;
  static const int Cmd_ARRAYSIZE =
    Rs485_Cmd_Cmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cmd_descriptor() {
    return Rs485_Cmd_descriptor();
  }
  static inline const ::std::string& Cmd_Name(Cmd value) {
    return Rs485_Cmd_Name(value);
  }
  static inline bool Cmd_Parse(const ::std::string& name,
      Cmd* value) {
    return Rs485_Cmd_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string dst = 1;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 1;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // required .Rs485.Type type = 2 [default = CMD];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Rs485_Type type() const;
  inline void set_type(::Rs485_Type value);

  // optional .Rs485.Cmd cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline ::Rs485_Cmd cmd() const;
  inline void set_cmd(::Rs485_Cmd value);

  // @@protoc_insertion_point(class_scope:Rs485)
 private:
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dst_;
  int type_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rs485_5fmessage_2eproto();
  friend void protobuf_AssignDesc_rs485_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_rs485_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static Rs485* default_instance_;
};
// ===================================================================


// ===================================================================

// Rs485

// required string dst = 1;
inline bool Rs485::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rs485::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rs485::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rs485::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& Rs485::dst() const {
  return *dst_;
}
inline void Rs485::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void Rs485::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void Rs485::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rs485::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* Rs485::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rs485::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Rs485.Type type = 2 [default = CMD];
inline bool Rs485::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rs485::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rs485::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rs485::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Rs485_Type Rs485::type() const {
  return static_cast< ::Rs485_Type >(type_);
}
inline void Rs485::set_type(::Rs485_Type value) {
  assert(::Rs485_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Rs485.Cmd cmd = 3;
inline bool Rs485::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rs485::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rs485::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rs485::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::Rs485_Cmd Rs485::cmd() const {
  return static_cast< ::Rs485_Cmd >(cmd_);
}
inline void Rs485::set_cmd(::Rs485_Cmd value) {
  assert(::Rs485_Cmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Rs485_Type>() {
  return ::Rs485_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Rs485_Cmd>() {
  return ::Rs485_Cmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rs485_5fmessage_2eproto__INCLUDED
