// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rs485_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rs485_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Rs485_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rs485_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Rs485_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Rs485_Cmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rs485_5fmessage_2eproto() {
  protobuf_AddDesc_rs485_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rs485_message.proto");
  GOOGLE_CHECK(file != NULL);
  Rs485_descriptor_ = file->message_type(0);
  static const int Rs485_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, cmd_),
  };
  Rs485_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rs485_descriptor_,
      Rs485::default_instance_,
      Rs485_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rs485));
  Rs485_Type_descriptor_ = Rs485_descriptor_->enum_type(0);
  Rs485_Cmd_descriptor_ = Rs485_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rs485_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rs485_descriptor_, &Rs485::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rs485_5fmessage_2eproto() {
  delete Rs485::default_instance_;
  delete Rs485_reflection_;
}

void protobuf_AddDesc_rs485_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023rs485_message.proto\"\313\001\n\005Rs485\022\013\n\003dst\030\001"
    " \002(\t\022\036\n\004type\030\002 \002(\0162\013.Rs485.Type:\003CMD\022\027\n\003"
    "cmd\030\003 \001(\0162\n.Rs485.Cmd\"\031\n\004Type\022\007\n\003CMD\020\000\022\010"
    "\n\004DATA\020\001\"a\n\003Cmd\022\013\n\007READ_1W\020\000\022\021\n\rREAD_TA_"
    "CHAIN\020\001\022\r\n\tREAD_ADC0\020\002\022\r\n\tREAD_ADC1\020\003\022\r\n"
    "\tREAD_ADC2\020\004\022\r\n\tREAD_ADC3\020\005", 227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rs485_message.proto", &protobuf_RegisterTypes);
  Rs485::default_instance_ = new Rs485();
  Rs485::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rs485_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rs485_5fmessage_2eproto {
  StaticDescriptorInitializer_rs485_5fmessage_2eproto() {
    protobuf_AddDesc_rs485_5fmessage_2eproto();
  }
} static_descriptor_initializer_rs485_5fmessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Rs485_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rs485_Type_descriptor_;
}
bool Rs485_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Rs485_Type Rs485::CMD;
const Rs485_Type Rs485::DATA;
const Rs485_Type Rs485::Type_MIN;
const Rs485_Type Rs485::Type_MAX;
const int Rs485::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Rs485_Cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rs485_Cmd_descriptor_;
}
bool Rs485_Cmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Rs485_Cmd Rs485::READ_1W;
const Rs485_Cmd Rs485::READ_TA_CHAIN;
const Rs485_Cmd Rs485::READ_ADC0;
const Rs485_Cmd Rs485::READ_ADC1;
const Rs485_Cmd Rs485::READ_ADC2;
const Rs485_Cmd Rs485::READ_ADC3;
const Rs485_Cmd Rs485::Cmd_MIN;
const Rs485_Cmd Rs485::Cmd_MAX;
const int Rs485::Cmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Rs485::kDstFieldNumber;
const int Rs485::kTypeFieldNumber;
const int Rs485::kCmdFieldNumber;
#endif  // !_MSC_VER

Rs485::Rs485()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rs485::InitAsDefaultInstance() {
}

Rs485::Rs485(const Rs485& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rs485::SharedCtor() {
  _cached_size_ = 0;
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  cmd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rs485::~Rs485() {
  SharedDtor();
}

void Rs485::SharedDtor() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void Rs485::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rs485::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rs485_descriptor_;
}

const Rs485& Rs485::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rs485_5fmessage_2eproto();
  return *default_instance_;
}

Rs485* Rs485::default_instance_ = NULL;

Rs485* Rs485::New() const {
  return new Rs485;
}

void Rs485::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
    type_ = 0;
    cmd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rs485::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Rs485.Type type = 2 [default = CMD];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Rs485_Type_IsValid(value)) {
            set_type(static_cast< ::Rs485_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmd;
        break;
      }

      // optional .Rs485.Cmd cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Rs485_Cmd_IsValid(value)) {
            set_cmd(static_cast< ::Rs485_Cmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rs485::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dst(), output);
  }

  // required .Rs485.Type type = 2 [default = CMD];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .Rs485.Cmd cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rs485::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dst(), target);
  }

  // required .Rs485.Type type = 2 [default = CMD];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .Rs485.Cmd cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rs485::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dst = 1;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

    // required .Rs485.Type type = 2 [default = CMD];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Rs485.Cmd cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rs485::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rs485* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rs485*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rs485::MergeFrom(const Rs485& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rs485::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rs485::CopyFrom(const Rs485& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rs485::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Rs485::Swap(Rs485* other) {
  if (other != this) {
    std::swap(dst_, other->dst_);
    std::swap(type_, other->type_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rs485::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rs485_descriptor_;
  metadata.reflection = Rs485_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
