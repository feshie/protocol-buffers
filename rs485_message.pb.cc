// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rs485_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rs485_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Rs485_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rs485_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Rs485_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Rs485_Sensor_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OwData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalogData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalogData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TempAccelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TempAccelData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rs485_5fmessage_2eproto() {
  protobuf_AddDesc_rs485_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rs485_message.proto");
  GOOGLE_CHECK(file != NULL);
  Rs485_descriptor_ = file->message_type(0);
  static const int Rs485_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, ow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, ad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, tad_),
  };
  Rs485_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rs485_descriptor_,
      Rs485::default_instance_,
      Rs485_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rs485, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rs485));
  Rs485_Type_descriptor_ = Rs485_descriptor_->enum_type(0);
  Rs485_Sensor_descriptor_ = Rs485_descriptor_->enum_type(1);
  OwData_descriptor_ = file->message_type(1);
  static const int OwData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwData, value_),
  };
  OwData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwData_descriptor_,
      OwData::default_instance_,
      OwData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwData));
  AnalogData_descriptor_ = file->message_type(2);
  static const int AnalogData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalogData, adc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalogData, value_),
  };
  AnalogData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalogData_descriptor_,
      AnalogData::default_instance_,
      AnalogData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalogData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalogData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalogData));
  TempAccelData_descriptor_ = file->message_type(3);
  static const int TempAccelData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempAccelData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempAccelData, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempAccelData, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempAccelData, temp_),
  };
  TempAccelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TempAccelData_descriptor_,
      TempAccelData::default_instance_,
      TempAccelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempAccelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TempAccelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TempAccelData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rs485_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rs485_descriptor_, &Rs485::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwData_descriptor_, &OwData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalogData_descriptor_, &AnalogData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TempAccelData_descriptor_, &TempAccelData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rs485_5fmessage_2eproto() {
  delete Rs485::default_instance_;
  delete Rs485_reflection_;
  delete OwData::default_instance_;
  delete OwData_reflection_;
  delete AnalogData::default_instance_;
  delete AnalogData_reflection_;
  delete TempAccelData::default_instance_;
  delete TempAccelData_reflection_;
}

void protobuf_AddDesc_rs485_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023rs485_message.proto\"\200\002\n\005Rs485\022\013\n\003dst\030\001"
    " \002(\005\022\037\n\004type\030\002 \002(\0162\013.Rs485.Type:\004READ\022\035\n"
    "\006sensor\030\003 \001(\0162\r.Rs485.Sensor\022\023\n\002ow\030\004 \003(\013"
    "2\007.OwData\022\027\n\002ad\030\005 \003(\0132\013.AnalogData\022\033\n\003ta"
    "d\030\006 \003(\0132\016.TempAccelData\"\032\n\004Type\022\010\n\004READ\020"
    "\000\022\010\n\004DATA\020\001\"C\n\006Sensor\022\006\n\002OW\020\000\022\014\n\010TA_CHAI"
    "N\020\001\022\006\n\002WP\020\002\022\007\n\003GAS\020\003\022\010\n\004ADC2\020\004\022\010\n\004ADC3\020\005"
    "\"#\n\006OwData\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \002(\002\"(\n"
    "\nAnalogData\022\013\n\003adc\030\001 \002(\005\022\r\n\005value\030\002 \002(\002\""
    "F\n\rTempAccelData\022\n\n\002id\030\001 \002(\005\022\r\n\005pitch\030\002 "
    "\002(\002\022\014\n\004roll\030\003 \002(\002\022\014\n\004temp\030\004 \002(\002", 431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rs485_message.proto", &protobuf_RegisterTypes);
  Rs485::default_instance_ = new Rs485();
  OwData::default_instance_ = new OwData();
  AnalogData::default_instance_ = new AnalogData();
  TempAccelData::default_instance_ = new TempAccelData();
  Rs485::default_instance_->InitAsDefaultInstance();
  OwData::default_instance_->InitAsDefaultInstance();
  AnalogData::default_instance_->InitAsDefaultInstance();
  TempAccelData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rs485_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rs485_5fmessage_2eproto {
  StaticDescriptorInitializer_rs485_5fmessage_2eproto() {
    protobuf_AddDesc_rs485_5fmessage_2eproto();
  }
} static_descriptor_initializer_rs485_5fmessage_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Rs485_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rs485_Type_descriptor_;
}
bool Rs485_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Rs485_Type Rs485::READ;
const Rs485_Type Rs485::DATA;
const Rs485_Type Rs485::Type_MIN;
const Rs485_Type Rs485::Type_MAX;
const int Rs485::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Rs485_Sensor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rs485_Sensor_descriptor_;
}
bool Rs485_Sensor_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Rs485_Sensor Rs485::OW;
const Rs485_Sensor Rs485::TA_CHAIN;
const Rs485_Sensor Rs485::WP;
const Rs485_Sensor Rs485::GAS;
const Rs485_Sensor Rs485::ADC2;
const Rs485_Sensor Rs485::ADC3;
const Rs485_Sensor Rs485::Sensor_MIN;
const Rs485_Sensor Rs485::Sensor_MAX;
const int Rs485::Sensor_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Rs485::kDstFieldNumber;
const int Rs485::kTypeFieldNumber;
const int Rs485::kSensorFieldNumber;
const int Rs485::kOwFieldNumber;
const int Rs485::kAdFieldNumber;
const int Rs485::kTadFieldNumber;
#endif  // !_MSC_VER

Rs485::Rs485()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rs485::InitAsDefaultInstance() {
}

Rs485::Rs485(const Rs485& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rs485::SharedCtor() {
  _cached_size_ = 0;
  dst_ = 0;
  type_ = 0;
  sensor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rs485::~Rs485() {
  SharedDtor();
}

void Rs485::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rs485::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rs485::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rs485_descriptor_;
}

const Rs485& Rs485::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rs485_5fmessage_2eproto();
  return *default_instance_;
}

Rs485* Rs485::default_instance_ = NULL;

Rs485* Rs485::New() const {
  return new Rs485;
}

void Rs485::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_ = 0;
    type_ = 0;
    sensor_ = 0;
  }
  ow_.Clear();
  ad_.Clear();
  tad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rs485::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .Rs485.Type type = 2 [default = READ];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Rs485_Type_IsValid(value)) {
            set_type(static_cast< ::Rs485_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sensor;
        break;
      }

      // optional .Rs485.Sensor sensor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensor:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Rs485_Sensor_IsValid(value)) {
            set_sensor(static_cast< ::Rs485_Sensor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ow;
        break;
      }

      // repeated .OwData ow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ow;
        if (input->ExpectTag(42)) goto parse_ad;
        break;
      }

      // repeated .AnalogData ad = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ad;
        if (input->ExpectTag(50)) goto parse_tad;
        break;
      }

      // repeated .TempAccelData tad = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tad;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rs485::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dst(), output);
  }

  // required .Rs485.Type type = 2 [default = READ];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .Rs485.Sensor sensor = 3;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sensor(), output);
  }

  // repeated .OwData ow = 4;
  for (int i = 0; i < this->ow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ow(i), output);
  }

  // repeated .AnalogData ad = 5;
  for (int i = 0; i < this->ad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ad(i), output);
  }

  // repeated .TempAccelData tad = 6;
  for (int i = 0; i < this->tad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rs485::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dst = 1;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dst(), target);
  }

  // required .Rs485.Type type = 2 [default = READ];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .Rs485.Sensor sensor = 3;
  if (has_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sensor(), target);
  }

  // repeated .OwData ow = 4;
  for (int i = 0; i < this->ow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ow(i), target);
  }

  // repeated .AnalogData ad = 5;
  for (int i = 0; i < this->ad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ad(i), target);
  }

  // repeated .TempAccelData tad = 6;
  for (int i = 0; i < this->tad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rs485::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dst = 1;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst());
    }

    // required .Rs485.Type type = 2 [default = READ];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Rs485.Sensor sensor = 3;
    if (has_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor());
    }

  }
  // repeated .OwData ow = 4;
  total_size += 1 * this->ow_size();
  for (int i = 0; i < this->ow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ow(i));
  }

  // repeated .AnalogData ad = 5;
  total_size += 1 * this->ad_size();
  for (int i = 0; i < this->ad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ad(i));
  }

  // repeated .TempAccelData tad = 6;
  total_size += 1 * this->tad_size();
  for (int i = 0; i < this->tad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tad(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rs485::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rs485* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rs485*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rs485::MergeFrom(const Rs485& from) {
  GOOGLE_CHECK_NE(&from, this);
  ow_.MergeFrom(from.ow_);
  ad_.MergeFrom(from.ad_);
  tad_.MergeFrom(from.tad_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sensor()) {
      set_sensor(from.sensor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rs485::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rs485::CopyFrom(const Rs485& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rs485::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < ow_size(); i++) {
    if (!this->ow(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ad_size(); i++) {
    if (!this->ad(i).IsInitialized()) return false;
  }
  for (int i = 0; i < tad_size(); i++) {
    if (!this->tad(i).IsInitialized()) return false;
  }
  return true;
}

void Rs485::Swap(Rs485* other) {
  if (other != this) {
    std::swap(dst_, other->dst_);
    std::swap(type_, other->type_);
    std::swap(sensor_, other->sensor_);
    ow_.Swap(&other->ow_);
    ad_.Swap(&other->ad_);
    tad_.Swap(&other->tad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rs485::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rs485_descriptor_;
  metadata.reflection = Rs485_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OwData::kIdFieldNumber;
const int OwData::kValueFieldNumber;
#endif  // !_MSC_VER

OwData::OwData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OwData::InitAsDefaultInstance() {
}

OwData::OwData(const OwData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OwData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwData::~OwData() {
  SharedDtor();
}

void OwData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OwData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwData_descriptor_;
}

const OwData& OwData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rs485_5fmessage_2eproto();
  return *default_instance_;
}

OwData* OwData::default_instance_ = NULL;

OwData* OwData::New() const {
  return new OwData;
}

void OwData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // required float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OwData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OwData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OwData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwData::MergeFrom(const OwData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwData::CopyFrom(const OwData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OwData::Swap(OwData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwData_descriptor_;
  metadata.reflection = OwData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalogData::kAdcFieldNumber;
const int AnalogData::kValueFieldNumber;
#endif  // !_MSC_VER

AnalogData::AnalogData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnalogData::InitAsDefaultInstance() {
}

AnalogData::AnalogData(const AnalogData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnalogData::SharedCtor() {
  _cached_size_ = 0;
  adc_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalogData::~AnalogData() {
  SharedDtor();
}

void AnalogData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnalogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalogData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalogData_descriptor_;
}

const AnalogData& AnalogData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rs485_5fmessage_2eproto();
  return *default_instance_;
}

AnalogData* AnalogData::default_instance_ = NULL;

AnalogData* AnalogData::New() const {
  return new AnalogData;
}

void AnalogData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    adc_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 adc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_)));
          set_has_adc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // required float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnalogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 adc = 1;
  if (has_adc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->adc(), output);
  }

  // required float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnalogData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 adc = 1;
  if (has_adc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->adc(), target);
  }

  // required float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnalogData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 adc = 1;
    if (has_adc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc());
    }

    // required float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalogData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalogData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalogData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalogData::MergeFrom(const AnalogData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adc()) {
      set_adc(from.adc());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalogData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogData::CopyFrom(const AnalogData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AnalogData::Swap(AnalogData* other) {
  if (other != this) {
    std::swap(adc_, other->adc_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalogData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalogData_descriptor_;
  metadata.reflection = AnalogData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TempAccelData::kIdFieldNumber;
const int TempAccelData::kPitchFieldNumber;
const int TempAccelData::kRollFieldNumber;
const int TempAccelData::kTempFieldNumber;
#endif  // !_MSC_VER

TempAccelData::TempAccelData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TempAccelData::InitAsDefaultInstance() {
}

TempAccelData::TempAccelData(const TempAccelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TempAccelData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pitch_ = 0;
  roll_ = 0;
  temp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TempAccelData::~TempAccelData() {
  SharedDtor();
}

void TempAccelData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TempAccelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TempAccelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TempAccelData_descriptor_;
}

const TempAccelData& TempAccelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rs485_5fmessage_2eproto();
  return *default_instance_;
}

TempAccelData* TempAccelData::default_instance_ = NULL;

TempAccelData* TempAccelData::New() const {
  return new TempAccelData;
}

void TempAccelData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pitch_ = 0;
    roll_ = 0;
    temp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TempAccelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_pitch;
        break;
      }

      // required float pitch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }

      // required float roll = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_temp;
        break;
      }

      // required float temp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TempAccelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // required float roll = 3;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  // required float temp = 4;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->temp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TempAccelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  // required float roll = 3;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  // required float temp = 4;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->temp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TempAccelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float pitch = 2;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float roll = 3;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float temp = 4;
    if (has_temp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TempAccelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TempAccelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TempAccelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TempAccelData::MergeFrom(const TempAccelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TempAccelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempAccelData::CopyFrom(const TempAccelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempAccelData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TempAccelData::Swap(TempAccelData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(temp_, other->temp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TempAccelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TempAccelData_descriptor_;
  metadata.reflection = TempAccelData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
