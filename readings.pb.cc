// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: readings.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "readings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Sample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sample_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_readings_2eproto() {
  protobuf_AddDesc_readings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "readings.proto");
  GOOGLE_CHECK(file != NULL);
  Sample_descriptor_ = file->message_type(0);
  static const int Sample_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, batt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, accx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, accy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, accz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, adc1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, adc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, rain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, avr_),
  };
  Sample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sample_descriptor_,
      Sample::default_instance_,
      Sample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sample));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_readings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sample_descriptor_, &Sample::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_readings_2eproto() {
  delete Sample::default_instance_;
  delete Sample_reflection_;
}

void protobuf_AddDesc_readings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016readings.proto\"\223\001\n\006Sample\022\014\n\004time\030\001 \002("
    "\007\022\014\n\004batt\030\002 \001(\002\022\014\n\004temp\030\003 \001(\002\022\014\n\004accX\030\004 "
    "\001(\021\022\014\n\004accY\030\005 \001(\021\022\014\n\004accZ\030\006 \001(\021\022\014\n\004ADC1\030"
    "\007 \001(\r\022\014\n\004ADC2\030\010 \001(\r\022\014\n\004rain\030\t \001(\r\022\013\n\003AVR"
    "\030\n \001(\014", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "readings.proto", &protobuf_RegisterTypes);
  Sample::default_instance_ = new Sample();
  Sample::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_readings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_readings_2eproto {
  StaticDescriptorInitializer_readings_2eproto() {
    protobuf_AddDesc_readings_2eproto();
  }
} static_descriptor_initializer_readings_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Sample::kTimeFieldNumber;
const int Sample::kBattFieldNumber;
const int Sample::kTempFieldNumber;
const int Sample::kAccXFieldNumber;
const int Sample::kAccYFieldNumber;
const int Sample::kAccZFieldNumber;
const int Sample::kADC1FieldNumber;
const int Sample::kADC2FieldNumber;
const int Sample::kRainFieldNumber;
const int Sample::kAVRFieldNumber;
#endif  // !_MSC_VER

Sample::Sample()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sample::InitAsDefaultInstance() {
}

Sample::Sample(const Sample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sample::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  batt_ = 0;
  temp_ = 0;
  accx_ = 0;
  accy_ = 0;
  accz_ = 0;
  adc1_ = 0u;
  adc2_ = 0u;
  rain_ = 0u;
  avr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sample::~Sample() {
  SharedDtor();
}

void Sample::SharedDtor() {
  if (avr_ != &::google::protobuf::internal::kEmptyString) {
    delete avr_;
  }
  if (this != default_instance_) {
  }
}

void Sample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sample_descriptor_;
}

const Sample& Sample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_readings_2eproto();
  return *default_instance_;
}

Sample* Sample::default_instance_ = NULL;

Sample* Sample::New() const {
  return new Sample;
}

void Sample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    batt_ = 0;
    temp_ = 0;
    accx_ = 0;
    accy_ = 0;
    accz_ = 0;
    adc1_ = 0u;
    adc2_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rain_ = 0u;
    if (has_avr()) {
      if (avr_ != &::google::protobuf::internal::kEmptyString) {
        avr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_batt;
        break;
      }

      // optional float batt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_batt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &batt_)));
          set_has_batt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_temp;
        break;
      }

      // optional float temp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accX;
        break;
      }

      // optional sint32 accX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &accx_)));
          set_has_accx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accY;
        break;
      }

      // optional sint32 accY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &accy_)));
          set_has_accy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_accZ;
        break;
      }

      // optional sint32 accZ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &accz_)));
          set_has_accz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ADC1;
        break;
      }

      // optional uint32 ADC1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ADC1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc1_)));
          set_has_adc1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ADC2;
        break;
      }

      // optional uint32 ADC2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ADC2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adc2_)));
          set_has_adc2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rain;
        break;
      }

      // optional uint32 rain = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rain_)));
          set_has_rain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_AVR;
        break;
      }

      // optional bytes AVR = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AVR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_avr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time(), output);
  }

  // optional float batt = 2;
  if (has_batt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->batt(), output);
  }

  // optional float temp = 3;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->temp(), output);
  }

  // optional sint32 accX = 4;
  if (has_accx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->accx(), output);
  }

  // optional sint32 accY = 5;
  if (has_accy()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->accy(), output);
  }

  // optional sint32 accZ = 6;
  if (has_accz()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->accz(), output);
  }

  // optional uint32 ADC1 = 7;
  if (has_adc1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->adc1(), output);
  }

  // optional uint32 ADC2 = 8;
  if (has_adc2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->adc2(), output);
  }

  // optional uint32 rain = 9;
  if (has_rain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rain(), output);
  }

  // optional bytes AVR = 10;
  if (has_avr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->avr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time(), target);
  }

  // optional float batt = 2;
  if (has_batt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->batt(), target);
  }

  // optional float temp = 3;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->temp(), target);
  }

  // optional sint32 accX = 4;
  if (has_accx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->accx(), target);
  }

  // optional sint32 accY = 5;
  if (has_accy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->accy(), target);
  }

  // optional sint32 accZ = 6;
  if (has_accz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->accz(), target);
  }

  // optional uint32 ADC1 = 7;
  if (has_adc1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->adc1(), target);
  }

  // optional uint32 ADC2 = 8;
  if (has_adc2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->adc2(), target);
  }

  // optional uint32 rain = 9;
  if (has_rain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rain(), target);
  }

  // optional bytes AVR = 10;
  if (has_avr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->avr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sample::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 time = 1;
    if (has_time()) {
      total_size += 1 + 4;
    }

    // optional float batt = 2;
    if (has_batt()) {
      total_size += 1 + 4;
    }

    // optional float temp = 3;
    if (has_temp()) {
      total_size += 1 + 4;
    }

    // optional sint32 accX = 4;
    if (has_accx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->accx());
    }

    // optional sint32 accY = 5;
    if (has_accy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->accy());
    }

    // optional sint32 accZ = 6;
    if (has_accz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->accz());
    }

    // optional uint32 ADC1 = 7;
    if (has_adc1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc1());
    }

    // optional uint32 ADC2 = 8;
    if (has_adc2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adc2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 rain = 9;
    if (has_rain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rain());
    }

    // optional bytes AVR = 10;
    if (has_avr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->avr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sample::MergeFrom(const Sample& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_batt()) {
      set_batt(from.batt());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_accx()) {
      set_accx(from.accx());
    }
    if (from.has_accy()) {
      set_accy(from.accy());
    }
    if (from.has_accz()) {
      set_accz(from.accz());
    }
    if (from.has_adc1()) {
      set_adc1(from.adc1());
    }
    if (from.has_adc2()) {
      set_adc2(from.adc2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rain()) {
      set_rain(from.rain());
    }
    if (from.has_avr()) {
      set_avr(from.avr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sample::CopyFrom(const Sample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Sample::Swap(Sample* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(batt_, other->batt_);
    std::swap(temp_, other->temp_);
    std::swap(accx_, other->accx_);
    std::swap(accy_, other->accy_);
    std::swap(accz_, other->accz_);
    std::swap(adc1_, other->adc1_);
    std::swap(adc2_, other->adc2_);
    std::swap(rain_, other->rain_);
    std::swap(avr_, other->avr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sample_descriptor_;
  metadata.reflection = Sample_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
